AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    "MRI Scheduler Project \n"

Parameters:
  CidrBlockVpcParameter:
    Description: CIDR block allocated for 
    Type: 'String'
    Default: 10.0.0.0/16

  PrivateSubnetAParameter:
    Description: CIDR block allocated for Private Subnet A
    Type: 'String'
    Default: 10.0.1.0/24

  PublicSubnetAParameter:
    Description: CIDR block allocated for Private Subnet A
    Type: 'String'
    Default: 10.0.2.0/24

  DBInstanceTypeParameter:
    Description: EC2 instance type for the database
    Type: String
    Default: t3.medium
    AllowedValues: [t2.medium, t2.large, t3.medium, t3.large]
    ConstraintDescription: must be a valid EC2 instance type.

  
  AMIID:
    Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

Globals:
  Function:
    AutoPublishAlias: live
    Handler: index.handler
    MemorySize: 256
    Runtime: python3.7
    Timeout: 20
    Tracing: Active

Resources:
  # Roles
  IAMEC2InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Description: The SSM Instance Profile
      RoleName: AWSEC2SSM
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  IAMEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
        InstanceProfileName: AWSEC2SSMProfile
        Roles: 
          - !Ref IAMEC2InstanceRole

  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CidrBlockVpcParameter
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Join ['', [!Ref "AWS::StackName", "-VPC" ]] 
  
  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Join ['', [!Ref "AWS::StackName", "-InternetGateway" ]]

  VpcInternetGatewayAttchment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Subnets
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetAParameter
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: Private Subnet A
  
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetAParameter
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet-A

  DataSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic to data resources
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        CidrIp: !Ref PrivateSubnetAParameter
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref PublicSubnetAParameter
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DataSecurityGroup
  # Route Tables
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Route Table A

  PublicRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table A

  # Routes
  PublicRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRouteA:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  # Attach the subnets to route tables
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTableA

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA
  
  # NAT Gateway:
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
      - Key: Name
        Value: !Sub NAT-${AWS::StackName}
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC

  AccessLogs:
    Type: AWS::Logs::LogGroup

  DatabaseEC2Instance:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !Ref AMIID
      InstanceType: !Ref DBInstanceTypeParameter
      IamInstanceProfile: !Ref IAMEC2InstanceProfile
      KeyName: 
        Ref: "KeyName"
      NetworkInterfaces:
      - GroupSet: 
        - Ref: "DataSecurityGroup"
        SubnetId:
          Ref: "PrivateSubnetA"
        AssociatePublicIpAddress: "false"
        DeviceIndex: "0"
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: 40
            DeleteOnTermination: 'false'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          cd /tmp
          sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          sudo systemctl enable amazon-ssm-agent
          sudo systemctl start amazon-ssm-agent
          sudo yum update -y
      Tags:
      - Key: 'Name'
        Value: 'MriPostgresDB'
      - Key: SSMManaged
        Value: "Yes"

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      AccessLogSettings:
        DestinationArn: !GetAtt AccessLogs.Arn
        Format: $context.requestId $context.requestTime $context.path $context.status $context.responseLatency $context.integrationLatency
      DefaultRouteSettings:
        ThrottlingBurstLimit: 200
      FailOnWarnings: True
      CorsConfiguration: 
        AllowHeaders: 
          - "*"
        AllowMethods: 
          - "*"
        AllowOrigins: 
          - "*"
        ExposeHeaders: 
          - "*"
  
  ThesaurusFileBucket: 
    Type: AWS::S3::Bucket
  
  copyFile: 
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: '2.2'
        description: 'Run a script to copy file from S3 onto Linux Instance.'
        parameters:
          fileName:
            type: String
            description: "(Required) Name of file in S3"
          destPath:
            type: String
            description: "(Required) EC2 instance ID"
          bucket: 
            type: String
            description: "(Required) S3 bucket name"
        mainSteps:
        - action: aws:runShellScript
          name: runCommands
          inputs:
            timeoutSeconds: '60'
            runCommand:
            - "aws s3 cp s3://{{bucket}}/{{fileName}} {{destPath}}{{fileName}}"
      DocumentType: Command
      Name: 'copyFile'

  PreprocessLayer:
      Type: AWS::Serverless::LayerVersion
      Properties:
        Description: Spell Checker 
        ContentUri: ./layers/spellchecker.zip 
        CompatibleRuntimes:
          - python3.8
          - python3.7
          - python3.6
        RetentionPolicy: Delete
  
  Psycopg2Layer:
      Type: AWS::Serverless::LayerVersion
      Properties:
        Description: Psycopg2 Library
        ContentUri: ./layers/psycopg2.zip
        CompatibleRuntimes:
          - python3.8
          - python3.7
          - python3.6
        RetentionPolicy: Delete
  
  PostgresLayer:
      Type: AWS::Serverless::LayerVersion
      Properties:
        Description: Postgres Custom Functions
        ContentUri: ./layers/postgresql.zip
        CompatibleRuntimes:
          - python3.8
          - python3.7
          - python3.6
        RetentionPolicy: Delete

  Preprocess:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./lambdas/preprocess
      Events:
        ExplicitApi: # warning: creates a public endpoint
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: Post
            Path: /parser
            TimeoutInMillis: 29000
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 100
      Layers: 
        - !Ref PreprocessLayer
        - !Ref Psycopg2Layer
        - !Ref PostgresLayer
      Policies:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/ComprehendFullAccess
        - arn:aws:iam::aws:policy/ComprehendMedicalFullAccess
        - SSMParameterReadPolicy:
            ParameterName: "mri-phsa*"
        - LambdaInvokePolicy:
            FunctionName:
              !Ref RuleProcessing
      VpcConfig: 
        SecurityGroupIds: 
          - !Ref DataSecurityGroup 
        SubnetIds:
          - !Ref PrivateSubnetA
      Environment:
        Variables:
          RULE_PROCESSING_LAMBDA: !Ref RuleProcessing

  RuleProcessing:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./lambdas/rule_processing
      Layers: 
        - !Ref Psycopg2Layer
        - !Ref PostgresLayer
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: "mri-phsa*"
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      VpcConfig: 
        SecurityGroupIds: 
          - !Ref DataSecurityGroup 
        SubnetIds: 
          - !Ref PrivateSubnetA
    
  QueryRules:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./lambdas/query_rules_table
      Events:
        ExplicitApi: # warning: creates a public endpoint
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: Post
            Path: /rules
            TimeoutInMillis: 29000
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 100
      Layers: 
        - !Ref Psycopg2Layer
        - !Ref PostgresLayer
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: "mri-phsa*"
        - LambdaInvokePolicy:
            FunctionName:
              !Ref UpdateWeights
      VpcConfig: 
        SecurityGroupIds: 
          - !Ref DataSecurityGroup 
        SubnetIds:
          - !Ref PrivateSubnetA
      Environment:
        Variables:
          UPDATE_WEIGHTS_LAMBDA: !Ref UpdateWeights

  QuerySpellchecker:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./lambdas/query_spellchecker
      Events:
        ExplicitApi: # warning: creates a public endpoint
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: Post
            Path: /spell
            TimeoutInMillis: 29000
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 100
      Layers: 
        - !Ref Psycopg2Layer
        - !Ref PostgresLayer
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: "mri-phsa*"
      VpcConfig: 
        SecurityGroupIds: 
          - !Ref DataSecurityGroup 
        SubnetIds:
          - !Ref PrivateSubnetA

  QueryConjunctions:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./lambdas/query_conjunctions
      Events:
        ExplicitApi: # warning: creates a public endpoint
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: Post
            Path: /conjunctions
            TimeoutInMillis: 29000
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 100
      Layers: 
        - !Ref Psycopg2Layer
        - !Ref PostgresLayer
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: "mri-phsa*"
      VpcConfig: 
        SecurityGroupIds: 
          - !Ref DataSecurityGroup 
        SubnetIds:
          - !Ref PrivateSubnetA

  QueryWeights:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./lambdas/query_weights
      Events:
        ExplicitApi: # warning: creates a public endpoint
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: Post
            Path: /weights
            TimeoutInMillis: 29000
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 100
      Layers: 
        - !Ref Psycopg2Layer
        - !Ref PostgresLayer
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: "mri-phsa*"
        - LambdaInvokePolicy:
            FunctionName:
              !Ref UpdateWeights
      VpcConfig: 
        SecurityGroupIds: 
          - !Ref DataSecurityGroup 
        SubnetIds:
          - !Ref PrivateSubnetA
      Environment:
        Variables:
          UPDATE_WEIGHTS_LAMBDA: !Ref UpdateWeights

  QuerySpecialtyTags:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./lambdas/query_specialty_tags
      Events:
        ExplicitApi: # warning: creates a public endpoint
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: Post
            Path: /tags
            TimeoutInMillis: 29000
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 100
      Layers: 
        - !Ref Psycopg2Layer
        - !Ref PostgresLayer
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: "mri-phsa*"
      VpcConfig: 
        SecurityGroupIds: 
          - !Ref DataSecurityGroup 
        SubnetIds:
          - !Ref PrivateSubnetA

  UpdateWeights:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./lambdas/update_word_weights
      Layers: 
        - !Ref Psycopg2Layer
        - !Ref PostgresLayer
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: "mri-phsa*"
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      VpcConfig: 
        SecurityGroupIds: 
          - !Ref DataSecurityGroup 
        SubnetIds: 
          - !Ref PrivateSubnetA

  DataResults:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./lambdas/results
      Events:
        ExplicitApi: # warning: creates a public endpoint
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: Post
            Path: /results
            TimeoutInMillis: 29000
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 100
      Layers: 
        - !Ref Psycopg2Layer
        - !Ref PostgresLayer
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: "mri-phsa*"
      VpcConfig: 
        SecurityGroupIds: 
          - !Ref DataSecurityGroup 
        SubnetIds: 
          - !Ref PrivateSubnetA

  Thesaurus:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./lambdas/thesaurus
      Events:
        FileUpload:
          Type: S3
          Properties: 
            Bucket: !Ref ThesaurusFileBucket
            Events: s3:ObjectCreated:*
      Layers: 
        - !Ref Psycopg2Layer
        - !Ref PostgresLayer
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: "mri-phsa*"
        - S3ReadPolicy:
            BucketName: '*'
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
        - arn:aws:iam::aws:policy/AWSResourceAccessManagerFullAccess
      VpcConfig: 
        SecurityGroupIds: 
          - !Ref DataSecurityGroup 
        SubnetIds:
          - !Ref PrivateSubnetA
      Environment:
        Variables:
          DEST_PATH: "/usr/share/pgsql/tsearch_data/" # Path to shared postgresql directory
          SEND_COMMAND_NAME: !Ref copyFile
          SSM_PATH: "/mri-phsa/ec2"

Outputs:
  Preprocess:
      Value: !GetAtt Preprocess.Arn
  RuleProcessing:
      Value: !GetAtt RuleProcessing.Arn
  QueryRules:
      Value: !GetAtt QueryRules.Arn
  QuerySpellchecker:
      Value: !GetAtt QuerySpellchecker.Arn
  QueryConjunctions: 
      Value: !GetAtt QueryConjunctions.Arn
  QueryWeights:
      Value: !GetAtt QueryWeights.Arn
  UpdateWeights: 
      Value: !GetAtt UpdateWeights.Arn
  DataResults:
      Value: !GetAtt DataResults.Arn
  HttpApiUrl:
      Description: URL of your API endpoint
      Value:
        Fn::Sub: 'https://${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/'
  VPC:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-vpc-id
  
  PrivateSubnetA:
    Description: Private Subnet A
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetA

  PublicSubnetA:
    Description: Public Subnet A
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetA

  DataSecurityGroup:
    Description: Allow traffic to data subnets
    Value: !Ref DataSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-DataSecurityGroup