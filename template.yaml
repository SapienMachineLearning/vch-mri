AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    "MRI Scheduler Project \n"

Parameters:
#   CollectionId:  
#     Default: twitter-selfie
#     Type: String
  SecurityGroupId: 
    Type: String
    Default: sg-040d55deb79054a53
  SubnetId: 
    Type: String
    Default: subnet-03b34c526bb19ba7a

Globals:
  Function:
    AutoPublishAlias: live
    Handler: index.handler
    MemorySize: 256
    Runtime: python3.7
    Timeout: 20
    Tracing: Active
    # Layers:
    #   - !Ref CoreLayer

Resources:

#   Bucket:
#     Type: AWS::S3::Bucket
#     Properties:
#       LifecycleConfiguration:
#         Rules:
#           - Id: DeleteRecordsAfter2Days
#             ExpirationInDays: 2
#             Status: Enabled
#             Prefix: "json-records"
#           - Id: DeleteAthenaReportsAfter2Days
#             ExpirationInDays: 2
#             Status: Enabled
#             Prefix: "twitter-ath-results"
#           - Id: DeleteParquetAfter2Days
#             ExpirationInDays: 2
#             Status: Enabled
#             Prefix: "parquet*"

#   BucketParameter:
#     Type: AWS::SSM::Parameter
#     Properties:
#       Name: /twitter-demo/bucket
#       Type: String
#       Value: !Ref Bucket
#       Description: Bucket Name

#   DdbImageTable: 
#     Type: AWS::DynamoDB::Table
#     Properties: 
#       AttributeDefinitions: 
#         - 
#           AttributeName: "img_url"
#           AttributeType: "S"
#       KeySchema: 
#         - 
#           AttributeName: "img_url"
#           KeyType: "HASH"
#       BillingMode: PAY_PER_REQUEST
#       TimeToLiveSpecification:
#         AttributeName: expire_at
#         Enabled: True

  AccessLogs:
    Type: AWS::Logs::LogGroup

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      AccessLogSettings:
        DestinationArn: !GetAtt AccessLogs.Arn
        Format: $context.requestId $context.requestTime $context.path $context.status $context.responseLatency $context.integrationLatency
      DefaultRouteSettings:
        ThrottlingBurstLimit: 200
      FailOnWarnings: True
      CorsConfiguration: 
        AllowHeaders: 
          - "*"
        AllowMethods: 
          - GET
          - POST
        AllowOrigins: 
          - "*"

  PreprocessLayer:
      Type: AWS::Serverless::LayerVersion
      Properties:
        Description: Spell Checker 
        ContentUri: ./layers/spellchecker.zip 
        CompatibleRuntimes:
          - python3.8
          - python3.7
          - python3.6
        RetentionPolicy: Delete

  RuleLayer:
      Type: AWS::Serverless::LayerVersion
      Properties:
        Description: Psycopg2 Library
        ContentUri: ./layers/postgresql.zip
        CompatibleRuntimes:
          - python3.8
          - python3.7
          - python3.6
        RetentionPolicy: Delete

  Preprocess:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./lambdas/preprocess
      Events:
        ExplicitApi: # warning: creates a public endpoint
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: Post
            Path: /parser
            TimeoutInMillis: 29000
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 100
      Layers: 
        - !Ref PreprocessLayer
      Policies:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - SSMParameterReadPolicy:
            ParameterName: "mri"
        - LambdaInvokePolicy:
            FunctionName:
              !Ref RuleProcessing
      Environment:
        Variables:
          RULE_PROCESSING_LAMBDA: !Ref RuleProcessing

  RuleProcessing:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./lambdas/rule_processing
      Layers: 
        - !Ref RuleLayer
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: "mri"
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      VpcConfig: 
        SecurityGroupIds: 
          - !Ref SecurityGroupId 
        SubnetIds: 
          - !Ref SubnetId
      
    #   Environment:
    #     Variables:
    #       Bucket: !Ref Bucket

#   Rekognition:
#     Type: AWS::Serverless::Function 
#     Properties:
#       CodeUri: ./lambdas/rekognition/   
#       Environment:
#         Variables:
#           Bucket: !Ref Bucket
#           CollectionId: !Ref CollectionId     
#       Policies:
#         - S3CrudPolicy:
#             BucketName:
#               !Ref Bucket
#         - SSMParameterReadPolicy:
#             ParameterName: "twitter-demo*"
#         - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess
#         - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess

#   ProcessFaces:
#     Type: AWS::Serverless::Function 
#     Properties:
#       CodeUri: ./lambdas/processfaces/
#       Environment:
#         Variables:
#           Bucket: !Ref Bucket
#           CollectionId: !Ref CollectionId
#       Policies:
#         - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
#         - SSMParameterReadPolicy:
#             ParameterName: "twitter-demo*"
#         - FirehoseCrudPolicy:
#             DeliveryStreamName: "*"        
#         - ComprehendBasicAccessPolicy: {}
#         - S3CrudPolicy:
#             BucketName:
#               !Ref Bucket
#         - RekognitionFacesManagementPolicy:
#             CollectionId:
#                 !Ref CollectionId

#   StateMachine:
#     Type: AWS::StepFunctions::StateMachine
#     Properties:
#       DefinitionString:
#         !Sub
#           - |-
#             {
#               "Comment": "Twitter selfie state machine",
#               "StartAt": "Rekognition",
#               "States": {
#                 "Rekognition": {
#                   "Type": "Task",
#                   "Resource": "${RunRekognitionArn}",
#                   "Next": "RekErrorHandler"
#                 },
#                 "RekErrorHandler": {
#                   "Type" : "Choice",
#                   "Choices": [
#                     {
#                       "Variable": "$.result",
#                       "StringEquals": "Succeed",
#                       "Next": "ProcessFaces"
#                     },
#                     {
#                       "Variable": "$.result",
#                       "StringEquals": "Fail",
#                       "Next": "FailState"
#                     }
#                   ],
#                   "Default": "FailState"
#                 },
#                 "ProcessFaces": {
#                   "Type": "Task",
#                   "Resource": "${ProcessFacesArn}",
#                   "Next": "FaceErrorHandler"
#                 },
#                 "FaceErrorHandler": {
#                   "Type" : "Choice",
#                   "Choices": [
#                     {
#                       "Variable": "$.result",
#                       "StringEquals": "Succeed",
#                       "Next": "SucceedState"
#                     },
#                     {
#                       "Variable": "$.result",
#                       "StringEquals": "Moderated",
#                       "Next": "SucceedState"
#                     },
#                     {
#                       "Variable": "$.result",
#                       "StringEquals": "Fail",
#                       "Next": "FailState"
#                     }
#                   ],
#                   "Default": "FailState"
#                 },
#                 "FailState": {
#                   "Type": "Fail",
#                   "Error": "DefaultStateError",
#                   "Cause": "No Matches!"
#                 },
#                 "SucceedState": {
#                   "Type": "Succeed"
#                 }
#               }
#             }
#           - ProcessFacesArn: !GetAtt ProcessFaces.Arn
#             RunRekognitionArn: !GetAtt Rekognition.Arn 
#       RoleArn: !GetAtt [ StatesExecutionRole, Arn ]

#   StatesExecutionRole:
#     Type: "AWS::IAM::Role"
#     Properties:
#       AssumeRolePolicyDocument:
#         Version: "2012-10-17"
#         Statement:
#           - Effect: "Allow"
#             Principal:
#               Service:
#                 - !Sub states.${AWS::Region}.amazonaws.com
#             Action: "sts:AssumeRole"
#       Path: "/"
#       Policies:
#         - PolicyName: StatesExecutionPolicy
#           PolicyDocument:
#             Version: "2012-10-17"
#             Statement:
#               - Effect: Allow
#                 Action:
#                   - "lambda:InvokeFunction"
#                 Resource: "*"

Outputs:
  Preprocess:
      Value: !GetAtt Preprocess.Arn
  RuleProcessing:
      Value: !GetAtt RuleProcessing.Arn
  HttpApiUrl:
      Description: URL of your API endpoint
      Value:
        Fn::Sub: 'https://${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/'